// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExampleEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get userA(): Bytes {
    let value = this.get("userA");
    return value!.toBytes();
  }

  set userA(value: Bytes) {
    this.set("userA", Value.fromBytes(value));
  }

  get userB(): Bytes {
    let value = this.get("userB");
    return value!.toBytes();
  }

  set userB(value: Bytes) {
    this.set("userB", Value.fromBytes(value));
  }
}

export class AskCanceled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AskCanceled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AskCanceled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AskCanceled", id.toString(), this);
    }
  }

  static load(id: string): AskCanceled | null {
    return changetype<AskCanceled | null>(store.get("AskCanceled", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get ask_seller(): Bytes {
    let value = this.get("ask_seller");
    return value!.toBytes();
  }

  set ask_seller(value: Bytes) {
    this.set("ask_seller", Value.fromBytes(value));
  }

  get ask_sellerFundsRecipient(): Bytes {
    let value = this.get("ask_sellerFundsRecipient");
    return value!.toBytes();
  }

  set ask_sellerFundsRecipient(value: Bytes) {
    this.set("ask_sellerFundsRecipient", Value.fromBytes(value));
  }

  get ask_askCurrency(): Bytes {
    let value = this.get("ask_askCurrency");
    return value!.toBytes();
  }

  set ask_askCurrency(value: Bytes) {
    this.set("ask_askCurrency", Value.fromBytes(value));
  }

  get ask_findersFeeBps(): i32 {
    let value = this.get("ask_findersFeeBps");
    return value!.toI32();
  }

  set ask_findersFeeBps(value: i32) {
    this.set("ask_findersFeeBps", Value.fromI32(value));
  }

  get ask_askPrice(): BigInt {
    let value = this.get("ask_askPrice");
    return value!.toBigInt();
  }

  set ask_askPrice(value: BigInt) {
    this.set("ask_askPrice", Value.fromBigInt(value));
  }
}

export class AskCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AskCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AskCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AskCreated", id.toString(), this);
    }
  }

  static load(id: string): AskCreated | null {
    return changetype<AskCreated | null>(store.get("AskCreated", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get ask_seller(): Bytes {
    let value = this.get("ask_seller");
    return value!.toBytes();
  }

  set ask_seller(value: Bytes) {
    this.set("ask_seller", Value.fromBytes(value));
  }

  get ask_sellerFundsRecipient(): Bytes {
    let value = this.get("ask_sellerFundsRecipient");
    return value!.toBytes();
  }

  set ask_sellerFundsRecipient(value: Bytes) {
    this.set("ask_sellerFundsRecipient", Value.fromBytes(value));
  }

  get ask_askCurrency(): Bytes {
    let value = this.get("ask_askCurrency");
    return value!.toBytes();
  }

  set ask_askCurrency(value: Bytes) {
    this.set("ask_askCurrency", Value.fromBytes(value));
  }

  get ask_findersFeeBps(): i32 {
    let value = this.get("ask_findersFeeBps");
    return value!.toI32();
  }

  set ask_findersFeeBps(value: i32) {
    this.set("ask_findersFeeBps", Value.fromI32(value));
  }

  get ask_askPrice(): BigInt {
    let value = this.get("ask_askPrice");
    return value!.toBigInt();
  }

  set ask_askPrice(value: BigInt) {
    this.set("ask_askPrice", Value.fromBigInt(value));
  }
}

export class AskFilled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AskFilled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AskFilled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AskFilled", id.toString(), this);
    }
  }

  static load(id: string): AskFilled | null {
    return changetype<AskFilled | null>(store.get("AskFilled", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get finder(): Bytes {
    let value = this.get("finder");
    return value!.toBytes();
  }

  set finder(value: Bytes) {
    this.set("finder", Value.fromBytes(value));
  }

  get ask_seller(): Bytes {
    let value = this.get("ask_seller");
    return value!.toBytes();
  }

  set ask_seller(value: Bytes) {
    this.set("ask_seller", Value.fromBytes(value));
  }

  get ask_sellerFundsRecipient(): Bytes {
    let value = this.get("ask_sellerFundsRecipient");
    return value!.toBytes();
  }

  set ask_sellerFundsRecipient(value: Bytes) {
    this.set("ask_sellerFundsRecipient", Value.fromBytes(value));
  }

  get ask_askCurrency(): Bytes {
    let value = this.get("ask_askCurrency");
    return value!.toBytes();
  }

  set ask_askCurrency(value: Bytes) {
    this.set("ask_askCurrency", Value.fromBytes(value));
  }

  get ask_findersFeeBps(): i32 {
    let value = this.get("ask_findersFeeBps");
    return value!.toI32();
  }

  set ask_findersFeeBps(value: i32) {
    this.set("ask_findersFeeBps", Value.fromI32(value));
  }

  get ask_askPrice(): BigInt {
    let value = this.get("ask_askPrice");
    return value!.toBigInt();
  }

  set ask_askPrice(value: BigInt) {
    this.set("ask_askPrice", Value.fromBigInt(value));
  }
}

export class AskPriceUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AskPriceUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AskPriceUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AskPriceUpdated", id.toString(), this);
    }
  }

  static load(id: string): AskPriceUpdated | null {
    return changetype<AskPriceUpdated | null>(store.get("AskPriceUpdated", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get ask_seller(): Bytes {
    let value = this.get("ask_seller");
    return value!.toBytes();
  }

  set ask_seller(value: Bytes) {
    this.set("ask_seller", Value.fromBytes(value));
  }

  get ask_sellerFundsRecipient(): Bytes {
    let value = this.get("ask_sellerFundsRecipient");
    return value!.toBytes();
  }

  set ask_sellerFundsRecipient(value: Bytes) {
    this.set("ask_sellerFundsRecipient", Value.fromBytes(value));
  }

  get ask_askCurrency(): Bytes {
    let value = this.get("ask_askCurrency");
    return value!.toBytes();
  }

  set ask_askCurrency(value: Bytes) {
    this.set("ask_askCurrency", Value.fromBytes(value));
  }

  get ask_findersFeeBps(): i32 {
    let value = this.get("ask_findersFeeBps");
    return value!.toI32();
  }

  set ask_findersFeeBps(value: i32) {
    this.set("ask_findersFeeBps", Value.fromI32(value));
  }

  get ask_askPrice(): BigInt {
    let value = this.get("ask_askPrice");
    return value!.toBigInt();
  }

  set ask_askPrice(value: BigInt) {
    this.set("ask_askPrice", Value.fromBigInt(value));
  }
}

export class AsksV1ExchangeExecuted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AsksV1ExchangeExecuted entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AsksV1ExchangeExecuted must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AsksV1ExchangeExecuted", id.toString(), this);
    }
  }

  static load(id: string): AsksV1ExchangeExecuted | null {
    return changetype<AsksV1ExchangeExecuted | null>(
      store.get("AsksV1ExchangeExecuted", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userA(): Bytes {
    let value = this.get("userA");
    return value!.toBytes();
  }

  set userA(value: Bytes) {
    this.set("userA", Value.fromBytes(value));
  }

  get userB(): Bytes {
    let value = this.get("userB");
    return value!.toBytes();
  }

  set userB(value: Bytes) {
    this.set("userB", Value.fromBytes(value));
  }

  get a_tokenContract(): Bytes {
    let value = this.get("a_tokenContract");
    return value!.toBytes();
  }

  set a_tokenContract(value: Bytes) {
    this.set("a_tokenContract", Value.fromBytes(value));
  }

  get a_tokenId(): BigInt {
    let value = this.get("a_tokenId");
    return value!.toBigInt();
  }

  set a_tokenId(value: BigInt) {
    this.set("a_tokenId", Value.fromBigInt(value));
  }

  get a_amount(): BigInt {
    let value = this.get("a_amount");
    return value!.toBigInt();
  }

  set a_amount(value: BigInt) {
    this.set("a_amount", Value.fromBigInt(value));
  }

  get b_tokenContract(): Bytes {
    let value = this.get("b_tokenContract");
    return value!.toBytes();
  }

  set b_tokenContract(value: Bytes) {
    this.set("b_tokenContract", Value.fromBytes(value));
  }

  get b_tokenId(): BigInt {
    let value = this.get("b_tokenId");
    return value!.toBigInt();
  }

  set b_tokenId(value: BigInt) {
    this.set("b_tokenId", Value.fromBigInt(value));
  }

  get b_amount(): BigInt {
    let value = this.get("b_amount");
    return value!.toBigInt();
  }

  set b_amount(value: BigInt) {
    this.set("b_amount", Value.fromBigInt(value));
  }
}

export class AsksV1RoyaltyPayout extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AsksV1RoyaltyPayout entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AsksV1RoyaltyPayout must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AsksV1RoyaltyPayout", id.toString(), this);
    }
  }

  static load(id: string): AsksV1RoyaltyPayout | null {
    return changetype<AsksV1RoyaltyPayout | null>(
      store.get("AsksV1RoyaltyPayout", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class AuctionBid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionBid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionBid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AuctionBid", id.toString(), this);
    }
  }

  static load(id: string): AuctionBid | null {
    return changetype<AuctionBid | null>(store.get("AuctionBid", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get firstBid(): boolean {
    let value = this.get("firstBid");
    return value!.toBoolean();
  }

  set firstBid(value: boolean) {
    this.set("firstBid", Value.fromBoolean(value));
  }

  get extended(): boolean {
    let value = this.get("extended");
    return value!.toBoolean();
  }

  set extended(value: boolean) {
    this.set("extended", Value.fromBoolean(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_currency(): Bytes {
    let value = this.get("auction_currency");
    return value!.toBytes();
  }

  set auction_currency(value: Bytes) {
    this.set("auction_currency", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }
}

export class AuctionCanceled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionCanceled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionCanceled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AuctionCanceled", id.toString(), this);
    }
  }

  static load(id: string): AuctionCanceled | null {
    return changetype<AuctionCanceled | null>(store.get("AuctionCanceled", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_currency(): Bytes {
    let value = this.get("auction_currency");
    return value!.toBytes();
  }

  set auction_currency(value: Bytes) {
    this.set("auction_currency", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }
}

export class AuctionCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AuctionCreated", id.toString(), this);
    }
  }

  static load(id: string): AuctionCreated | null {
    return changetype<AuctionCreated | null>(store.get("AuctionCreated", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_currency(): Bytes {
    let value = this.get("auction_currency");
    return value!.toBytes();
  }

  set auction_currency(value: Bytes) {
    this.set("auction_currency", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }
}

export class AuctionEnded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionEnded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionEnded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AuctionEnded", id.toString(), this);
    }
  }

  static load(id: string): AuctionEnded | null {
    return changetype<AuctionEnded | null>(store.get("AuctionEnded", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_currency(): Bytes {
    let value = this.get("auction_currency");
    return value!.toBytes();
  }

  set auction_currency(value: Bytes) {
    this.set("auction_currency", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }
}

export class AuctionReservePriceUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AuctionReservePriceUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionReservePriceUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AuctionReservePriceUpdated", id.toString(), this);
    }
  }

  static load(id: string): AuctionReservePriceUpdated | null {
    return changetype<AuctionReservePriceUpdated | null>(
      store.get("AuctionReservePriceUpdated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_currency(): Bytes {
    let value = this.get("auction_currency");
    return value!.toBytes();
  }

  set auction_currency(value: Bytes) {
    this.set("auction_currency", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }
}

export class ReserveAuctionCoreErc20RoyaltyPayout extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionCoreErc20RoyaltyPayout entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionCoreErc20RoyaltyPayout must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionCoreErc20RoyaltyPayout", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionCoreErc20RoyaltyPayout | null {
    return changetype<ReserveAuctionCoreErc20RoyaltyPayout | null>(
      store.get("ReserveAuctionCoreErc20RoyaltyPayout", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class ReserveAuctionCoreEthAuctionBid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionCoreEthAuctionBid entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionCoreEthAuctionBid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionCoreEthAuctionBid", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionCoreEthAuctionBid | null {
    return changetype<ReserveAuctionCoreEthAuctionBid | null>(
      store.get("ReserveAuctionCoreEthAuctionBid", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get firstBid(): boolean {
    let value = this.get("firstBid");
    return value!.toBoolean();
  }

  set firstBid(value: boolean) {
    this.set("firstBid", Value.fromBoolean(value));
  }

  get extended(): boolean {
    let value = this.get("extended");
    return value!.toBoolean();
  }

  set extended(value: boolean) {
    this.set("extended", Value.fromBoolean(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }
}

export class ReserveAuctionCoreEthAuctionCanceled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionCoreEthAuctionCanceled entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionCoreEthAuctionCanceled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionCoreEthAuctionCanceled", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionCoreEthAuctionCanceled | null {
    return changetype<ReserveAuctionCoreEthAuctionCanceled | null>(
      store.get("ReserveAuctionCoreEthAuctionCanceled", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }
}

export class ReserveAuctionCoreEthAuctionCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionCoreEthAuctionCreated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionCoreEthAuctionCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionCoreEthAuctionCreated", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionCoreEthAuctionCreated | null {
    return changetype<ReserveAuctionCoreEthAuctionCreated | null>(
      store.get("ReserveAuctionCoreEthAuctionCreated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }
}

export class ReserveAuctionCoreEthAuctionEnded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionCoreEthAuctionEnded entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionCoreEthAuctionEnded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionCoreEthAuctionEnded", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionCoreEthAuctionEnded | null {
    return changetype<ReserveAuctionCoreEthAuctionEnded | null>(
      store.get("ReserveAuctionCoreEthAuctionEnded", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }
}

export class ReserveAuctionCoreEthAuctionReservePriceUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionCoreEthAuctionReservePriceUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionCoreEthAuctionReservePriceUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "ReserveAuctionCoreEthAuctionReservePriceUpdated",
        id.toString(),
        this
      );
    }
  }

  static load(
    id: string
  ): ReserveAuctionCoreEthAuctionReservePriceUpdated | null {
    return changetype<ReserveAuctionCoreEthAuctionReservePriceUpdated | null>(
      store.get("ReserveAuctionCoreEthAuctionReservePriceUpdated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }
}

export class ReserveAuctionCoreEthRoyaltyPayout extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionCoreEthRoyaltyPayout entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionCoreEthRoyaltyPayout must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionCoreEthRoyaltyPayout", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionCoreEthRoyaltyPayout | null {
    return changetype<ReserveAuctionCoreEthRoyaltyPayout | null>(
      store.get("ReserveAuctionCoreEthRoyaltyPayout", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class ReserveAuctionFindersEthAuctionBid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionFindersEthAuctionBid entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionFindersEthAuctionBid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionFindersEthAuctionBid", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionFindersEthAuctionBid | null {
    return changetype<ReserveAuctionFindersEthAuctionBid | null>(
      store.get("ReserveAuctionFindersEthAuctionBid", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get firstBid(): boolean {
    let value = this.get("firstBid");
    return value!.toBoolean();
  }

  set firstBid(value: boolean) {
    this.set("firstBid", Value.fromBoolean(value));
  }

  get extended(): boolean {
    let value = this.get("extended");
    return value!.toBoolean();
  }

  set extended(value: boolean) {
    this.set("extended", Value.fromBoolean(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_finder(): Bytes {
    let value = this.get("auction_finder");
    return value!.toBytes();
  }

  set auction_finder(value: Bytes) {
    this.set("auction_finder", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_findersFeeBps(): i32 {
    let value = this.get("auction_findersFeeBps");
    return value!.toI32();
  }

  set auction_findersFeeBps(value: i32) {
    this.set("auction_findersFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionFindersEthAuctionCanceled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionFindersEthAuctionCanceled entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionFindersEthAuctionCanceled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionFindersEthAuctionCanceled", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionFindersEthAuctionCanceled | null {
    return changetype<ReserveAuctionFindersEthAuctionCanceled | null>(
      store.get("ReserveAuctionFindersEthAuctionCanceled", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_finder(): Bytes {
    let value = this.get("auction_finder");
    return value!.toBytes();
  }

  set auction_finder(value: Bytes) {
    this.set("auction_finder", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_findersFeeBps(): i32 {
    let value = this.get("auction_findersFeeBps");
    return value!.toI32();
  }

  set auction_findersFeeBps(value: i32) {
    this.set("auction_findersFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionFindersEthAuctionCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionFindersEthAuctionCreated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionFindersEthAuctionCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionFindersEthAuctionCreated", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionFindersEthAuctionCreated | null {
    return changetype<ReserveAuctionFindersEthAuctionCreated | null>(
      store.get("ReserveAuctionFindersEthAuctionCreated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_finder(): Bytes {
    let value = this.get("auction_finder");
    return value!.toBytes();
  }

  set auction_finder(value: Bytes) {
    this.set("auction_finder", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_findersFeeBps(): i32 {
    let value = this.get("auction_findersFeeBps");
    return value!.toI32();
  }

  set auction_findersFeeBps(value: i32) {
    this.set("auction_findersFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionFindersEthAuctionEnded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionFindersEthAuctionEnded entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionFindersEthAuctionEnded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionFindersEthAuctionEnded", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionFindersEthAuctionEnded | null {
    return changetype<ReserveAuctionFindersEthAuctionEnded | null>(
      store.get("ReserveAuctionFindersEthAuctionEnded", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_finder(): Bytes {
    let value = this.get("auction_finder");
    return value!.toBytes();
  }

  set auction_finder(value: Bytes) {
    this.set("auction_finder", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_findersFeeBps(): i32 {
    let value = this.get("auction_findersFeeBps");
    return value!.toI32();
  }

  set auction_findersFeeBps(value: i32) {
    this.set("auction_findersFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionFindersEthAuctionReservePriceUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionFindersEthAuctionReservePriceUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionFindersEthAuctionReservePriceUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "ReserveAuctionFindersEthAuctionReservePriceUpdated",
        id.toString(),
        this
      );
    }
  }

  static load(
    id: string
  ): ReserveAuctionFindersEthAuctionReservePriceUpdated | null {
    return changetype<ReserveAuctionFindersEthAuctionReservePriceUpdated | null>(
      store.get("ReserveAuctionFindersEthAuctionReservePriceUpdated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_finder(): Bytes {
    let value = this.get("auction_finder");
    return value!.toBytes();
  }

  set auction_finder(value: Bytes) {
    this.set("auction_finder", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_findersFeeBps(): i32 {
    let value = this.get("auction_findersFeeBps");
    return value!.toI32();
  }

  set auction_findersFeeBps(value: i32) {
    this.set("auction_findersFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionFindersEthRoyaltyPayout extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionFindersEthRoyaltyPayout entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionFindersEthRoyaltyPayout must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionFindersEthRoyaltyPayout", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionFindersEthRoyaltyPayout | null {
    return changetype<ReserveAuctionFindersEthRoyaltyPayout | null>(
      store.get("ReserveAuctionFindersEthRoyaltyPayout", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class ReserveAuctionFindersErc20AuctionBid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionFindersErc20AuctionBid entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionFindersErc20AuctionBid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionFindersErc20AuctionBid", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionFindersErc20AuctionBid | null {
    return changetype<ReserveAuctionFindersErc20AuctionBid | null>(
      store.get("ReserveAuctionFindersErc20AuctionBid", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get firstBid(): boolean {
    let value = this.get("firstBid");
    return value!.toBoolean();
  }

  set firstBid(value: boolean) {
    this.set("firstBid", Value.fromBoolean(value));
  }

  get extended(): boolean {
    let value = this.get("extended");
    return value!.toBoolean();
  }

  set extended(value: boolean) {
    this.set("extended", Value.fromBoolean(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_currency(): Bytes {
    let value = this.get("auction_currency");
    return value!.toBytes();
  }

  set auction_currency(value: Bytes) {
    this.set("auction_currency", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_finder(): Bytes {
    let value = this.get("auction_finder");
    return value!.toBytes();
  }

  set auction_finder(value: Bytes) {
    this.set("auction_finder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_findersFeeBps(): i32 {
    let value = this.get("auction_findersFeeBps");
    return value!.toI32();
  }

  set auction_findersFeeBps(value: i32) {
    this.set("auction_findersFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionFindersErc20AuctionCanceled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionFindersErc20AuctionCanceled entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionFindersErc20AuctionCanceled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "ReserveAuctionFindersErc20AuctionCanceled",
        id.toString(),
        this
      );
    }
  }

  static load(id: string): ReserveAuctionFindersErc20AuctionCanceled | null {
    return changetype<ReserveAuctionFindersErc20AuctionCanceled | null>(
      store.get("ReserveAuctionFindersErc20AuctionCanceled", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_currency(): Bytes {
    let value = this.get("auction_currency");
    return value!.toBytes();
  }

  set auction_currency(value: Bytes) {
    this.set("auction_currency", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_finder(): Bytes {
    let value = this.get("auction_finder");
    return value!.toBytes();
  }

  set auction_finder(value: Bytes) {
    this.set("auction_finder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_findersFeeBps(): i32 {
    let value = this.get("auction_findersFeeBps");
    return value!.toI32();
  }

  set auction_findersFeeBps(value: i32) {
    this.set("auction_findersFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionFindersErc20AuctionCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionFindersErc20AuctionCreated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionFindersErc20AuctionCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "ReserveAuctionFindersErc20AuctionCreated",
        id.toString(),
        this
      );
    }
  }

  static load(id: string): ReserveAuctionFindersErc20AuctionCreated | null {
    return changetype<ReserveAuctionFindersErc20AuctionCreated | null>(
      store.get("ReserveAuctionFindersErc20AuctionCreated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_currency(): Bytes {
    let value = this.get("auction_currency");
    return value!.toBytes();
  }

  set auction_currency(value: Bytes) {
    this.set("auction_currency", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_finder(): Bytes {
    let value = this.get("auction_finder");
    return value!.toBytes();
  }

  set auction_finder(value: Bytes) {
    this.set("auction_finder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_findersFeeBps(): i32 {
    let value = this.get("auction_findersFeeBps");
    return value!.toI32();
  }

  set auction_findersFeeBps(value: i32) {
    this.set("auction_findersFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionFindersErc20AuctionEnded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionFindersErc20AuctionEnded entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionFindersErc20AuctionEnded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionFindersErc20AuctionEnded", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionFindersErc20AuctionEnded | null {
    return changetype<ReserveAuctionFindersErc20AuctionEnded | null>(
      store.get("ReserveAuctionFindersErc20AuctionEnded", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_currency(): Bytes {
    let value = this.get("auction_currency");
    return value!.toBytes();
  }

  set auction_currency(value: Bytes) {
    this.set("auction_currency", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_finder(): Bytes {
    let value = this.get("auction_finder");
    return value!.toBytes();
  }

  set auction_finder(value: Bytes) {
    this.set("auction_finder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_findersFeeBps(): i32 {
    let value = this.get("auction_findersFeeBps");
    return value!.toI32();
  }

  set auction_findersFeeBps(value: i32) {
    this.set("auction_findersFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionFindersErc20AuctionReservePriceUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionFindersErc20AuctionReservePriceUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionFindersErc20AuctionReservePriceUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "ReserveAuctionFindersErc20AuctionReservePriceUpdated",
        id.toString(),
        this
      );
    }
  }

  static load(
    id: string
  ): ReserveAuctionFindersErc20AuctionReservePriceUpdated | null {
    return changetype<ReserveAuctionFindersErc20AuctionReservePriceUpdated | null>(
      store.get("ReserveAuctionFindersErc20AuctionReservePriceUpdated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_currency(): Bytes {
    let value = this.get("auction_currency");
    return value!.toBytes();
  }

  set auction_currency(value: Bytes) {
    this.set("auction_currency", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_finder(): Bytes {
    let value = this.get("auction_finder");
    return value!.toBytes();
  }

  set auction_finder(value: Bytes) {
    this.set("auction_finder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_findersFeeBps(): i32 {
    let value = this.get("auction_findersFeeBps");
    return value!.toI32();
  }

  set auction_findersFeeBps(value: i32) {
    this.set("auction_findersFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionFindersErc20RoyaltyPayout extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionFindersErc20RoyaltyPayout entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionFindersErc20RoyaltyPayout must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionFindersErc20RoyaltyPayout", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionFindersErc20RoyaltyPayout | null {
    return changetype<ReserveAuctionFindersErc20RoyaltyPayout | null>(
      store.get("ReserveAuctionFindersErc20RoyaltyPayout", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class ReserveAuctionListingErc20AuctionBid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionListingErc20AuctionBid entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionListingErc20AuctionBid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionListingErc20AuctionBid", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionListingErc20AuctionBid | null {
    return changetype<ReserveAuctionListingErc20AuctionBid | null>(
      store.get("ReserveAuctionListingErc20AuctionBid", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get firstBid(): boolean {
    let value = this.get("firstBid");
    return value!.toBoolean();
  }

  set firstBid(value: boolean) {
    this.set("firstBid", Value.fromBoolean(value));
  }

  get extended(): boolean {
    let value = this.get("extended");
    return value!.toBoolean();
  }

  set extended(value: boolean) {
    this.set("extended", Value.fromBoolean(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_currency(): Bytes {
    let value = this.get("auction_currency");
    return value!.toBytes();
  }

  set auction_currency(value: Bytes) {
    this.set("auction_currency", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_listingFeeRecipient(): Bytes {
    let value = this.get("auction_listingFeeRecipient");
    return value!.toBytes();
  }

  set auction_listingFeeRecipient(value: Bytes) {
    this.set("auction_listingFeeRecipient", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_listingFeeBps(): i32 {
    let value = this.get("auction_listingFeeBps");
    return value!.toI32();
  }

  set auction_listingFeeBps(value: i32) {
    this.set("auction_listingFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionListingErc20AuctionCanceled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionListingErc20AuctionCanceled entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionListingErc20AuctionCanceled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "ReserveAuctionListingErc20AuctionCanceled",
        id.toString(),
        this
      );
    }
  }

  static load(id: string): ReserveAuctionListingErc20AuctionCanceled | null {
    return changetype<ReserveAuctionListingErc20AuctionCanceled | null>(
      store.get("ReserveAuctionListingErc20AuctionCanceled", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_currency(): Bytes {
    let value = this.get("auction_currency");
    return value!.toBytes();
  }

  set auction_currency(value: Bytes) {
    this.set("auction_currency", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_listingFeeRecipient(): Bytes {
    let value = this.get("auction_listingFeeRecipient");
    return value!.toBytes();
  }

  set auction_listingFeeRecipient(value: Bytes) {
    this.set("auction_listingFeeRecipient", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_listingFeeBps(): i32 {
    let value = this.get("auction_listingFeeBps");
    return value!.toI32();
  }

  set auction_listingFeeBps(value: i32) {
    this.set("auction_listingFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionListingErc20AuctionCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionListingErc20AuctionCreated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionListingErc20AuctionCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "ReserveAuctionListingErc20AuctionCreated",
        id.toString(),
        this
      );
    }
  }

  static load(id: string): ReserveAuctionListingErc20AuctionCreated | null {
    return changetype<ReserveAuctionListingErc20AuctionCreated | null>(
      store.get("ReserveAuctionListingErc20AuctionCreated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_currency(): Bytes {
    let value = this.get("auction_currency");
    return value!.toBytes();
  }

  set auction_currency(value: Bytes) {
    this.set("auction_currency", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_listingFeeRecipient(): Bytes {
    let value = this.get("auction_listingFeeRecipient");
    return value!.toBytes();
  }

  set auction_listingFeeRecipient(value: Bytes) {
    this.set("auction_listingFeeRecipient", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_listingFeeBps(): i32 {
    let value = this.get("auction_listingFeeBps");
    return value!.toI32();
  }

  set auction_listingFeeBps(value: i32) {
    this.set("auction_listingFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionListingErc20AuctionEnded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionListingErc20AuctionEnded entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionListingErc20AuctionEnded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionListingErc20AuctionEnded", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionListingErc20AuctionEnded | null {
    return changetype<ReserveAuctionListingErc20AuctionEnded | null>(
      store.get("ReserveAuctionListingErc20AuctionEnded", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_currency(): Bytes {
    let value = this.get("auction_currency");
    return value!.toBytes();
  }

  set auction_currency(value: Bytes) {
    this.set("auction_currency", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_listingFeeRecipient(): Bytes {
    let value = this.get("auction_listingFeeRecipient");
    return value!.toBytes();
  }

  set auction_listingFeeRecipient(value: Bytes) {
    this.set("auction_listingFeeRecipient", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_listingFeeBps(): i32 {
    let value = this.get("auction_listingFeeBps");
    return value!.toI32();
  }

  set auction_listingFeeBps(value: i32) {
    this.set("auction_listingFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionListingErc20AuctionReservePriceUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionListingErc20AuctionReservePriceUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionListingErc20AuctionReservePriceUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "ReserveAuctionListingErc20AuctionReservePriceUpdated",
        id.toString(),
        this
      );
    }
  }

  static load(
    id: string
  ): ReserveAuctionListingErc20AuctionReservePriceUpdated | null {
    return changetype<ReserveAuctionListingErc20AuctionReservePriceUpdated | null>(
      store.get("ReserveAuctionListingErc20AuctionReservePriceUpdated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_currency(): Bytes {
    let value = this.get("auction_currency");
    return value!.toBytes();
  }

  set auction_currency(value: Bytes) {
    this.set("auction_currency", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_listingFeeRecipient(): Bytes {
    let value = this.get("auction_listingFeeRecipient");
    return value!.toBytes();
  }

  set auction_listingFeeRecipient(value: Bytes) {
    this.set("auction_listingFeeRecipient", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_listingFeeBps(): i32 {
    let value = this.get("auction_listingFeeBps");
    return value!.toI32();
  }

  set auction_listingFeeBps(value: i32) {
    this.set("auction_listingFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionListingErc20RoyaltyPayout extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionListingErc20RoyaltyPayout entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionListingErc20RoyaltyPayout must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionListingErc20RoyaltyPayout", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionListingErc20RoyaltyPayout | null {
    return changetype<ReserveAuctionListingErc20RoyaltyPayout | null>(
      store.get("ReserveAuctionListingErc20RoyaltyPayout", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class ReserveAuctionListingEthAuctionBid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionListingEthAuctionBid entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionListingEthAuctionBid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionListingEthAuctionBid", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionListingEthAuctionBid | null {
    return changetype<ReserveAuctionListingEthAuctionBid | null>(
      store.get("ReserveAuctionListingEthAuctionBid", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get firstBid(): boolean {
    let value = this.get("firstBid");
    return value!.toBoolean();
  }

  set firstBid(value: boolean) {
    this.set("firstBid", Value.fromBoolean(value));
  }

  get extended(): boolean {
    let value = this.get("extended");
    return value!.toBoolean();
  }

  set extended(value: boolean) {
    this.set("extended", Value.fromBoolean(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_listingFeeRecipient(): Bytes {
    let value = this.get("auction_listingFeeRecipient");
    return value!.toBytes();
  }

  set auction_listingFeeRecipient(value: Bytes) {
    this.set("auction_listingFeeRecipient", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_listingFeeBps(): i32 {
    let value = this.get("auction_listingFeeBps");
    return value!.toI32();
  }

  set auction_listingFeeBps(value: i32) {
    this.set("auction_listingFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionListingEthAuctionCanceled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionListingEthAuctionCanceled entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionListingEthAuctionCanceled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionListingEthAuctionCanceled", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionListingEthAuctionCanceled | null {
    return changetype<ReserveAuctionListingEthAuctionCanceled | null>(
      store.get("ReserveAuctionListingEthAuctionCanceled", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_listingFeeRecipient(): Bytes {
    let value = this.get("auction_listingFeeRecipient");
    return value!.toBytes();
  }

  set auction_listingFeeRecipient(value: Bytes) {
    this.set("auction_listingFeeRecipient", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_listingFeeBps(): i32 {
    let value = this.get("auction_listingFeeBps");
    return value!.toI32();
  }

  set auction_listingFeeBps(value: i32) {
    this.set("auction_listingFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionListingEthAuctionCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionListingEthAuctionCreated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionListingEthAuctionCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionListingEthAuctionCreated", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionListingEthAuctionCreated | null {
    return changetype<ReserveAuctionListingEthAuctionCreated | null>(
      store.get("ReserveAuctionListingEthAuctionCreated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_listingFeeRecipient(): Bytes {
    let value = this.get("auction_listingFeeRecipient");
    return value!.toBytes();
  }

  set auction_listingFeeRecipient(value: Bytes) {
    this.set("auction_listingFeeRecipient", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_listingFeeBps(): i32 {
    let value = this.get("auction_listingFeeBps");
    return value!.toI32();
  }

  set auction_listingFeeBps(value: i32) {
    this.set("auction_listingFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionListingEthAuctionEnded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionListingEthAuctionEnded entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionListingEthAuctionEnded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionListingEthAuctionEnded", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionListingEthAuctionEnded | null {
    return changetype<ReserveAuctionListingEthAuctionEnded | null>(
      store.get("ReserveAuctionListingEthAuctionEnded", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_listingFeeRecipient(): Bytes {
    let value = this.get("auction_listingFeeRecipient");
    return value!.toBytes();
  }

  set auction_listingFeeRecipient(value: Bytes) {
    this.set("auction_listingFeeRecipient", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_listingFeeBps(): i32 {
    let value = this.get("auction_listingFeeBps");
    return value!.toI32();
  }

  set auction_listingFeeBps(value: i32) {
    this.set("auction_listingFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionListingEthAuctionReservePriceUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionListingEthAuctionReservePriceUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionListingEthAuctionReservePriceUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "ReserveAuctionListingEthAuctionReservePriceUpdated",
        id.toString(),
        this
      );
    }
  }

  static load(
    id: string
  ): ReserveAuctionListingEthAuctionReservePriceUpdated | null {
    return changetype<ReserveAuctionListingEthAuctionReservePriceUpdated | null>(
      store.get("ReserveAuctionListingEthAuctionReservePriceUpdated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auction_seller(): Bytes {
    let value = this.get("auction_seller");
    return value!.toBytes();
  }

  set auction_seller(value: Bytes) {
    this.set("auction_seller", Value.fromBytes(value));
  }

  get auction_reservePrice(): BigInt {
    let value = this.get("auction_reservePrice");
    return value!.toBigInt();
  }

  set auction_reservePrice(value: BigInt) {
    this.set("auction_reservePrice", Value.fromBigInt(value));
  }

  get auction_sellerFundsRecipient(): Bytes {
    let value = this.get("auction_sellerFundsRecipient");
    return value!.toBytes();
  }

  set auction_sellerFundsRecipient(value: Bytes) {
    this.set("auction_sellerFundsRecipient", Value.fromBytes(value));
  }

  get auction_highestBid(): BigInt {
    let value = this.get("auction_highestBid");
    return value!.toBigInt();
  }

  set auction_highestBid(value: BigInt) {
    this.set("auction_highestBid", Value.fromBigInt(value));
  }

  get auction_highestBidder(): Bytes {
    let value = this.get("auction_highestBidder");
    return value!.toBytes();
  }

  set auction_highestBidder(value: Bytes) {
    this.set("auction_highestBidder", Value.fromBytes(value));
  }

  get auction_duration(): BigInt {
    let value = this.get("auction_duration");
    return value!.toBigInt();
  }

  set auction_duration(value: BigInt) {
    this.set("auction_duration", Value.fromBigInt(value));
  }

  get auction_startTime(): BigInt {
    let value = this.get("auction_startTime");
    return value!.toBigInt();
  }

  set auction_startTime(value: BigInt) {
    this.set("auction_startTime", Value.fromBigInt(value));
  }

  get auction_listingFeeRecipient(): Bytes {
    let value = this.get("auction_listingFeeRecipient");
    return value!.toBytes();
  }

  set auction_listingFeeRecipient(value: Bytes) {
    this.set("auction_listingFeeRecipient", Value.fromBytes(value));
  }

  get auction_firstBidTime(): BigInt {
    let value = this.get("auction_firstBidTime");
    return value!.toBigInt();
  }

  set auction_firstBidTime(value: BigInt) {
    this.set("auction_firstBidTime", Value.fromBigInt(value));
  }

  get auction_listingFeeBps(): i32 {
    let value = this.get("auction_listingFeeBps");
    return value!.toI32();
  }

  set auction_listingFeeBps(value: i32) {
    this.set("auction_listingFeeBps", Value.fromI32(value));
  }
}

export class ReserveAuctionListingEthRoyaltyPayout extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReserveAuctionListingEthRoyaltyPayout entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReserveAuctionListingEthRoyaltyPayout must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReserveAuctionListingEthRoyaltyPayout", id.toString(), this);
    }
  }

  static load(id: string): ReserveAuctionListingEthRoyaltyPayout | null {
    return changetype<ReserveAuctionListingEthRoyaltyPayout | null>(
      store.get("ReserveAuctionListingEthRoyaltyPayout", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): Bytes {
    let value = this.get("tokenContract");
    return value!.toBytes();
  }

  set tokenContract(value: Bytes) {
    this.set("tokenContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}
